// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/wisdom_book.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WisdomBook_GetChallenge_FullMethodName = "/WisdomBook/GetChallenge"
	WisdomBook_GetQuote_FullMethodName     = "/WisdomBook/GetQuote"
)

// WisdomBookClient is the client API for WisdomBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WisdomBookClient interface {
	GetChallenge(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Challenge, error)
	GetQuote(ctx context.Context, in *Challenge, opts ...grpc.CallOption) (*Quote, error)
}

type wisdomBookClient struct {
	cc grpc.ClientConnInterface
}

func NewWisdomBookClient(cc grpc.ClientConnInterface) WisdomBookClient {
	return &wisdomBookClient{cc}
}

func (c *wisdomBookClient) GetChallenge(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, WisdomBook_GetChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wisdomBookClient) GetQuote(ctx context.Context, in *Challenge, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, WisdomBook_GetQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WisdomBookServer is the server API for WisdomBook service.
// All implementations must embed UnimplementedWisdomBookServer
// for forward compatibility
type WisdomBookServer interface {
	GetChallenge(context.Context, *Empty) (*Challenge, error)
	GetQuote(context.Context, *Challenge) (*Quote, error)
	mustEmbedUnimplementedWisdomBookServer()
}

// UnimplementedWisdomBookServer must be embedded to have forward compatible implementations.
type UnimplementedWisdomBookServer struct {
}

func (UnimplementedWisdomBookServer) GetChallenge(context.Context, *Empty) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedWisdomBookServer) GetQuote(context.Context, *Challenge) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedWisdomBookServer) mustEmbedUnimplementedWisdomBookServer() {}

// UnsafeWisdomBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WisdomBookServer will
// result in compilation errors.
type UnsafeWisdomBookServer interface {
	mustEmbedUnimplementedWisdomBookServer()
}

func RegisterWisdomBookServer(s grpc.ServiceRegistrar, srv WisdomBookServer) {
	s.RegisterService(&WisdomBook_ServiceDesc, srv)
}

func _WisdomBook_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomBookServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WisdomBook_GetChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomBookServer).GetChallenge(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WisdomBook_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Challenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomBookServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WisdomBook_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomBookServer).GetQuote(ctx, req.(*Challenge))
	}
	return interceptor(ctx, in, info, handler)
}

// WisdomBook_ServiceDesc is the grpc.ServiceDesc for WisdomBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WisdomBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WisdomBook",
	HandlerType: (*WisdomBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _WisdomBook_GetChallenge_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _WisdomBook_GetQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wisdom_book.proto",
}
